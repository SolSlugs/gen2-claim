{"version":3,"sources":["candy-machine.ts","assets/gen2.png","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","createMintCandyInstruction","mintPublicKey","mintTokenAddress","payer","paymentTokenAddress","dataLayout","BufferLayout","data","Buffer","alloc","span","encode","instruction","amount","u64","toBuffer","keys","pubkey","isSigner","isWritable","TransactionInstruction","programId","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","walletAddress","splTokenMintAddress","SystemProgram","SYSVAR_RENT_PUBKEY","from","getCandyMachineState","anchorWallet","candyMachineId","connection","tokenMintPublicKey","a","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","console","log","getTokenWallet","associatedAddress","getAccountInfo","accountInfo","balance","getTokenAccountBalance","value","Number","paymentTokenExists","paymentTokenCount","getMasterEdition","mint","findProgramAddress","getMetadata","wallet","mintOneToken","config","treasury","setAlertState","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","rent","mintToInstruction","instructions","push","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","signaturePromise","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","remainingAccounts","open","message","severity","signature","getSignatureStatuses","status","sleep","shortenAddress","address","chars","slice","ms","Promise","resolve","setTimeout","ConnectButton","styled","WalletMultiButton","DisconnectButton","CounterText","Item","props","style","marginTop","children","renderCounter","days","hours","minutes","seconds","completed","Home","useState","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setPaymentTokenExists","setPaymentTokenCount","undefined","alertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","refreshCandyMachineState","onMint","err","msg","code","indexOf","useEffect","src","gen2","alt","position","bottom","left","width","height","className","display","justifyContent","fontSize","toBase58","flexDirection","alignItems","padding","paddingLeft","paddingRight","border","borderRadius","backgroundColor","color","disabled","onClick","date","onMount","onComplete","renderer","href","Snackbar","autoHideDuration","onClose","Alert","network","Connection","theme","createTheme","palette","type","overrides","MuiButtonBase","root","MuiButton","textTransform","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e41e608.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {\n    PublicKey,\n    TransactionInstruction,\n    SignatureStatus,\n} from '@solana/web3.js';\n\nimport {\n    MintLayout,\n    TOKEN_PROGRAM_ID,\n    Token,\n    u64,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n    \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n    \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n    id: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    program: anchor.Program;\n}\n\ninterface CandyMachineState {\n    candyMachine: CandyMachine;\n    itemsAvailable: number;\n    itemsRedeemed: number;\n    itemsRemaining: number;\n    goLiveDate: Date;\n    paymentTokenExists: boolean;\n    paymentTokenCount: number;\n}\n\nfunction createMintCandyInstruction(\n    mintPublicKey: PublicKey,\n    mintTokenAddress: PublicKey,\n    payer: PublicKey,\n    paymentTokenAddress: PublicKey,\n) {\n    const dataLayout = BufferLayout.struct([\n        BufferLayout.u8('instruction'),\n        BufferLayout.blob(8, 'amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n\n    dataLayout.encode(\n        {\n            instruction: 7, // MintTo\n            amount: new u64(1).toBuffer(),\n        },\n        data,\n    );\n\n    const keys = [\n        {\n            pubkey: mintPublicKey,\n            isSigner: false,\n            isWritable: true,\n        },\n        {\n            pubkey: mintTokenAddress,\n            isSigner: false,\n            isWritable: true,\n        },\n        {\n            pubkey: payer,\n            isSigner: true,\n            isWritable: false,\n        },\n        {\n            pubkey: paymentTokenAddress,\n            isSigner: false,\n            isWritable: true,\n        },\n        {\n            pubkey: payer,\n            isSigner: false,\n            isWritable: false,\n        },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: TOKEN_PROGRAM_ID,\n        data,\n    });\n}\n\nconst createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress: anchor.web3.PublicKey,\n    payer: anchor.web3.PublicKey,\n    walletAddress: anchor.web3.PublicKey,\n    splTokenMintAddress: anchor.web3.PublicKey\n) => {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n        { pubkey: walletAddress, isSigner: false, isWritable: false },\n        { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n        {\n            pubkey: anchor.web3.SystemProgram.programId,\n            isSigner: false,\n            isWritable: false,\n        },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        {\n            pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n            isSigner: false,\n            isWritable: false,\n        },\n    ];\n    return new anchor.web3.TransactionInstruction({\n        keys,\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n        data: Buffer.from([]),\n    });\n};\n\nexport const getCandyMachineState = async (\n    anchorWallet: anchor.Wallet,\n    candyMachineId: anchor.web3.PublicKey,\n    connection: anchor.web3.Connection,\n    tokenMintPublicKey: PublicKey,\n    payer: PublicKey,\n): Promise<CandyMachineState> => {\n    const provider = new anchor.Provider(connection, anchorWallet, {\n        preflightCommitment: \"recent\",\n    });\n\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n    const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n    const candyMachine = {\n        id: candyMachineId,\n        connection,\n        program,\n    };\n\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n\n    const itemsAvailable = state.data.itemsAvailable.toNumber();\n    const itemsRedeemed = state.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n    let goLiveDate = state.data.goLiveDate.toNumber();\n    goLiveDate = new Date(goLiveDate * 1000);\n\n    console.log({\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveDate,\n    });\n\n    /* Address to store the new payment token in for the user */\n    const associatedAddress = await getTokenWallet(payer, tokenMintPublicKey);\n\n    const accountInfo = await connection.getAccountInfo(\n        associatedAddress,\n    );\n\n    let balance = 0;\n\n    if (accountInfo) {\n        const { value } = await connection.getTokenAccountBalance(\n            associatedAddress,\n        );\n\n        balance = Number(value.amount);\n    }\n\n    return {\n        candyMachine,\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveDate,\n        paymentTokenExists: accountInfo !== null,\n        paymentTokenCount: balance,\n    };\n};\n\nconst getMasterEdition = async (\n    mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from(\"metadata\"),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n                Buffer.from(\"edition\"),\n            ],\n            TOKEN_METADATA_PROGRAM_ID\n        )\n    )[0];\n};\n\nconst getMetadata = async (\n    mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [\n                Buffer.from(\"metadata\"),\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n                mint.toBuffer(),\n            ],\n            TOKEN_METADATA_PROGRAM_ID\n        )\n    )[0];\n};\n\nconst getTokenWallet = async (\n    wallet: anchor.web3.PublicKey,\n    mint: anchor.web3.PublicKey\n) => {\n    return (\n        await anchor.web3.PublicKey.findProgramAddress(\n            [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n        )\n    )[0];\n};\n\nexport const mintOneToken = async (\n    candyMachine: CandyMachine,\n    config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n    payer: anchor.web3.PublicKey,\n    treasury: anchor.web3.PublicKey,\n    tokenMintPublicKey: PublicKey,\n    setAlertState: any,\n): Promise<SignatureStatus | null> => {\n\n    const mint = anchor.web3.Keypair.generate();\n    const token = await getTokenWallet(payer, mint.publicKey);\n    const { connection, program } = candyMachine;\n    const metadata = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n\n    const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n    );\n\n    /* Address to store the new payment token in for the user */\n    const associatedAddress = await getTokenWallet(payer, tokenMintPublicKey);\n\n    /* Create the token account for the SPL payment token */\n    const mintToInstruction = createMintCandyInstruction(\n        mint.publicKey,\n        token,\n        payer,\n        associatedAddress,\n    );\n\n    const instructions = [];\n\n    instructions.push(\n        anchor.web3.SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: mint.publicKey,\n            space: MintLayout.span,\n            lamports: rent,\n            programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n            TOKEN_PROGRAM_ID,\n            mint.publicKey,\n            0,\n            payer,\n            payer\n        ),\n        createAssociatedTokenAccountInstruction(\n            token,\n            payer,\n            payer,\n            mint.publicKey\n        ),\n        mintToInstruction,\n    );\n\n    const signaturePromise = program.rpc.mintNft({\n        accounts: {\n            config,\n            candyMachine: candyMachine.id,\n            payer: payer,\n            wallet: treasury,\n            mint: mint.publicKey,\n            metadata,\n            masterEdition,\n            mintAuthority: payer,\n            updateAuthority: payer,\n            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: anchor.web3.SystemProgram.programId,\n            rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n            clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        },\n        signers: [mint],\n        instructions,\n        remainingAccounts: [\n            {\n                pubkey: associatedAddress,\n                isSigner: false,\n                isWritable: true,\n            },\n            {\n                pubkey: payer,\n                isSigner: false,\n                isWritable: false,\n            },\n        ],\n    });\n\n    setAlertState({\n        open: true,\n        message: 'Minting...',\n        severity: 'info',\n    });\n\n    const signature = await signaturePromise;\n\n    while (true) {\n        const status = await connection.getSignatureStatuses([signature]);\n        \n        if (status === null) {\n            await sleep(2000);\n        } else {\n            return status.value[0];\n        }\n    }\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","export default __webpack_public_path__ + \"static/media/gen2.53486c6a.png\";","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {\n    PublicKey,\n    Connection,\n} from \"@solana/web3.js\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletMultiButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport gen2 from './assets/gen2.png';\nimport {\n    CandyMachine,\n    getCandyMachineState,\n    mintOneToken,\n    shortenAddress,\n} from \"./candy-machine\";\n\nconst ConnectButton = styled(WalletMultiButton)`\n    background-color: #c5f1ff !important;\n    color: #3e3e3e !important;\n    font-size: 30px !important;\n`;\n\nconst DisconnectButton = styled(WalletMultiButton)`\n    background-color: #c5f1ff !important;\n    color: #3e3e3e !important;\n    font-size: 20px !important;\n`;\n\nconst CounterText = styled.span``; // add your styles here\n\nexport interface HomeProps {\n    candyMachineId: PublicKey;\n    config: PublicKey;\n    connection: Connection;\n    startDate: number;\n    treasury: PublicKey;\n    tokenMintPublicKey: PublicKey;\n}\n\nconst Item = (props: any) => {\n  return (\n      <span style={{\n          marginTop: '10px',\n          ...props.style,\n      }}>\n          {props.children}\n      </span>\n  );\n}\n\nconst Home = (props: HomeProps) => {\n    const [isActive, setIsActive] = useState(false); // true when countdown completes\n    const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n    const [isMinting, setIsMinting] = useState(false);\n\n    const [paymentTokenExists, setPaymentTokenExists] = useState(false);\n    const [paymentTokenCount, setPaymentTokenCount] = useState(0);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const [startDate, setStartDate] = useState(\n        new Date(props.startDate * 1000)\n    );\n\n    const wallet = useAnchorWallet();\n    const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n    const refreshCandyMachineState = () => {\n        (async () => {\n            if (!wallet) return;\n\n            const {\n                candyMachine,\n                goLiveDate,\n                itemsRemaining,\n                paymentTokenExists,\n                paymentTokenCount,\n            } = await getCandyMachineState(\n                wallet as anchor.Wallet,\n                props.candyMachineId,\n                props.connection,\n                props.tokenMintPublicKey,\n                wallet.publicKey,\n            );\n\n            setIsSoldOut(itemsRemaining === 0);\n            setStartDate(goLiveDate);\n\n            setPaymentTokenExists(paymentTokenExists);\n            setPaymentTokenCount(paymentTokenCount);\n\n            setCandyMachine(candyMachine);\n        })();\n    };\n\n    const onMint = async () => {\n        try {\n            setIsMinting(true);\n            if (wallet && candyMachine?.program) {\n                \n                const status = await mintOneToken(\n                    candyMachine,\n                    props.config,\n                    wallet.publicKey,\n                    props.treasury,\n                    props.tokenMintPublicKey,\n                    setAlertState,\n                );\n\n                if (!status?.err) {\n                    setAlertState({\n                        open: true,\n                        message: \"Congratulations! Mint succeeded!\",\n                        severity: \"success\",\n                    });\n                } else {\n                    setAlertState({\n                        open: true,\n                        message: \"Mint failed! Please try again!\",\n                        severity: \"error\",\n                    });\n                }\n            }\n        } catch (error: any) {\n            // TODO: blech:\n            let message = error.msg || \"Minting failed! Please try again!\";\n            if (!error.msg) {\n                if (error.message.indexOf(\"0x138\")) {\n                } else if (error.message.indexOf(\"0x137\")) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf(\"0x135\")) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                    setIsSoldOut(true);\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n            refreshCandyMachineState();\n        }\n    };\n\n    useEffect(refreshCandyMachineState, [\n        wallet,\n        props.candyMachineId,\n        props.connection,\n        props.tokenMintPublicKey,\n    ]);\n\n    return (\n        <main>\n            <img\n                src={gen2}\n                alt='gen2slug'\n                style={{\n                    position: 'fixed',\n                    bottom: '20px',\n                    left: '20px',\n                    width: '400px',\n                    height: '400px',\n                }}\n            />\n            <div\n                className=\"mint-container\"\n            >\n                {wallet && (\n                    <>\n                                                \n                        {paymentTokenExists && (\n                            <>\n                                <div style={{ display: 'flex', width: '90%', justifyContent: 'space-between', fontSize: '28px' }}>\n                                    <Item>\n                                        Wallet: {shortenAddress(wallet.publicKey.toBase58() || \"\")}\n                                    </Item>\n\n                                    <Item>\n                                        Mint Cost: Free!\n                                    </Item>\n                                </div>\n\n                                <div style={{ flexDirection: 'column', display: 'flex', alignItems: 'center', marginTop: '40px' }}>\n                                    {paymentTokenCount === 0 && (\n                                        <>\n                                            <Item style={{ fontSize: '30px' }}>\n                                                Congratulations, you have claimed all your generation 2 slugs!\n                                            </Item>\n\n                                            <DisconnectButton\n                                                style={{ marginTop: '30px' }}\n                                                className=\"button is-primary is-normal\"\n                                            >\n                                                Disconnect Wallet\n                                            </DisconnectButton>\n                                        </>\n                                    )}\n\n                                    {paymentTokenCount > 0 && (\n                                        <>\n                                            <Item style={{ fontSize: '30px' }}>\n                                                {`You can claim ${paymentTokenCount} generation 2 slug${paymentTokenCount === 1 ? '' : 's'}!`}\n                                            </Item>\n\n                                            <button\n                                                style={{\n                                                    marginTop: '30px',\n                                                    fontSize: '30px',\n                                                    padding: '10px',\n                                                    paddingLeft: '20px',\n                                                    paddingRight: '20px',\n                                                    border: 'none',\n                                                    borderRadius: '4px',\n                                                    backgroundColor: '#c5f1ff',\n                                                    color: '#3e3e3e',\n                                                }}\n                                                disabled={isSoldOut || !isActive || isMinting}\n                                                onClick={onMint}\n                                            >\n                                                {isSoldOut ? (\n                                                    \"SOLD OUT\"\n                                                ) : isActive ? (\n                                                    isMinting ? 'MINTING...' : 'MINT'\n                                                ) : (\n                                                    <Countdown\n                                                        date={startDate}\n                                                        onMount={({ completed }) =>\n                                                            completed && setIsActive(true)\n                                                        }\n                                                        onComplete={() => setIsActive(true)}\n                                                        renderer={renderCounter}\n                                                    />\n                                                )}\n                                            </button>\n                                        </>\n                                    )}\n                                </div>\n                            </>\n                        )}\n\n                        {candyMachine && !paymentTokenExists && (\n                            <>\n                                <div style={{ display: 'flex', width: '90%', justifyContent: 'space-between', fontSize: '28px' }}>\n                                    <Item>\n\n                                        Wallet: {shortenAddress(wallet.publicKey.toBase58() || \"\")}\n                                    </Item>\n\n                                    <Item>\n                                        Mint Cost: Free!\n                                    </Item>\n                                </div>\n\n                                <Item style={{ marginTop: '60px', width: '600px' }}>\n                                    You are not eligible for any generation 2 slugs. Please verify you have the correct wallet address connected.\n                                </Item>\n\n                                <Item style={{ marginTop: '40px', width: '600px' }}>\n                                    Generation 2 slugs were rewarded to users who burnt two or more generation 1 slugs.\n                                </Item>\n\n                                <DisconnectButton\n                                    style={{ marginTop: '30px' }}\n                                    className=\"button is-primary is-normal\"\n                                    color=\"primary\"\n                                >\n                                    Disconnect Wallet\n                                </DisconnectButton>\n\n                                <a href=\"https://solslugs.com/#/gen2\" style={{ color: '#383838', marginTop: '30px' }}>\n                                    Verify Eligibility\n                                </a>\n                            </>\n                        )}\n                    </>\n                )}\n\n                {!wallet && (\n                    <>\n                        <p>\n                            Connect your wallet to mint a generation 2 Sol Slug!\n                        </p>\n\n                        <ConnectButton\n                            style={{ marginTop: \"1rem\" }}\n                            className=\"button is-primary is-normal\"\n                        />\n                    </>\n                )}\n            </div>\n\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({ ...alertState, open: false })}\n            >\n                <Alert\n                    onClose={() =>\n                        setAlertState({ ...alertState, open: false })\n                    }\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport interface AlertState {\n    open: boolean;\n    message: string;\n    severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n    return (\n        <CounterText>\n            {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds}{\" \"}\n            seconds\n        </CounterText>\n    );\n};\n\nexport default Home;\n","import { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { PublicKey } from '@solana/web3.js';\n\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new PublicKey(\n    'BnyR8w8JaHugASzoiwsydhdDKS6VZyujxQcTgryPGhis',\n);\n\nconst config = new PublicKey(\n    '7WTEyfMay4mb2Drr1csrkxGFpanXjCzHf64obfPcDRWQ'\n);\n\nconst candyMachineId = new PublicKey(\n    '6ebgTh2HpFH3WvUxjSPRcUE6siRvD9Fx7zUwAnDKjUBs'\n);\n\nconst tokenMintPublicKey = new PublicKey(\n    'gen2VK2sZstCfzsbN7rGiMCoe4WuMS9JwLiJNTn4cEy'\n);\n\nconst network = 'mainnet-beta' as WalletAdapterNetwork;\n\nconst rpcHost = 'https://spring-crimson-shape.solana-mainnet.quiknode.pro/101d753db4b4b167756067e5dbeabb4fad28adb3/';\nconst connection = new anchor.web3.Connection(rpcHost);\nconst startDateSeed = 1577836800;\n\nconst theme = createTheme({\n    palette: {\n        type: \"dark\",\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: \"centered\",\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: \"12px 16px\",\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n        ],\n        []\n    );\n\n    return (\n        <ThemeProvider theme={theme}>\n            <ConnectionProvider endpoint={endpoint}>\n                <WalletProvider wallets={wallets} autoConnect={true}>\n                    <WalletDialogProvider>\n                        <div className=\"Aligner\">\n                            <div className=\"Aligner-item Aligner-item--top\"></div>\n                            <div className=\"Aligner-item\">\n                                <Home\n                                    candyMachineId={candyMachineId}\n                                    config={config}\n                                    connection={connection}\n                                    startDate={startDateSeed}\n                                    treasury={treasury}\n                                    tokenMintPublicKey={tokenMintPublicKey}\n                                />\n                            </div>\n                            <div className=\"Aligner-item Aligner-item--bottom\"></div>\n                        </div>\n                    </WalletDialogProvider>\n                </WalletProvider>\n            </ConnectionProvider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.global.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}